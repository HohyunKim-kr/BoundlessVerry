{
  "title": "Boundless ZK 프로토콜 리서치 보고서",
  "sections": [
    {
      "heading": "1. Boundless란 무엇인가?",
      "content": "Boundless는 블록체인의 계산 한계를 해결하기 위해 만들어진 범용 영지식(ZK) 컴퓨팅 프로토콜이다. 기존 블록체인은 모든 노드가 모든 트랜잭션을 반복 실행해야 하기 때문에 속도와 확장성에 한계가 있다. Boundless는 이 문제를 해결하기 위해 오프체인에서 복잡한 계산을 수행하고, 그 결과를 ZK 증명 형태로 만들어 블록체인에서 짧고 빠르게 검증할 수 있도록 해준다."
    },
    {
      "heading": "2. 기술 구조 개요",
      "content": "Boundless의 구조는 크게 두 부분으로 나뉜다: 오프체인에서 계산을 수행하고 증명을 만드는 프로버(Prover) 네트워크와 이 증명을 받아서 검증하고 결과를 반영하는 스마트 컨트랙트 기반의 마켓(Market). 개발자는 연산을 요청하고, 프로버는 이를 수행한 뒤 증명을 생성하여 마켓에 제출한다. 이 과정에서 프로버는 자신이 작업을 성공적으로 수행했을 경우에만 보상을 받기 때문에 신뢰성 있는 작업 환경이 자연스럽게 만들어진다. 프로버는 RISC Zero의 zkVM을 사용하여 Rust로 작성된 프로그램을 실행한다. 이를 위해 Boundless는 자체적으로 프로버 전용 클러스터인 Bento를 제공하며, 멀티 머신, 멀티 GPU를 활용해 빠르게 ZK 증명을 만들고, 실패 시 자동 재시도하는 구조를 갖추고 있다."
    },
    {
      "heading": "3. 스마트 컨트랙트와의 연동 방식",
      "content": "Boundless는 Solidity로 작성된 스마트 컨트랙트를 통해 블록체인과 연동된다. 개발자는 Boundless의 마켓 컨트랙트를 통해 계산 요청을 올리고, 완료된 증명을 다시 제출받아 검증한다. 이 과정에서 프로버와 사용자 간에 자동으로 정산이 이루어지며, 작업이 실패하거나 허위일 경우 보상이 지급되지 않도록 설계돼 있다. 또한 Boundless는 다양한 L1/L2 체인에 쉽게 통합될 수 있도록 설계되었으며, 현재는 Sepolia 테스트넷에서 운영 중이다. 메인넷 지원도 계획되어 있다."
    },
    {
      "heading": "4. 개발자 관점에서의 사용성",
      "content": "Boundless는 개발자가 쉽게 사용할 수 있도록 예제 템플릿, CLI 도구, Rust SDK, 스마트 컨트랙트 예제 등을 제공한다. 특히, 프로그램 작성 -> 증명 요청 -> 결과 수신 -> 스마트컨트랙트 제출까지 전 과정을 자동화한 샘플을 통해 진입 장벽을 낮추고 있다. CLI를 통해 증명 요청, 입금, 출금, 상태 확인 등을 모두 실행할 수 있으며, 문서화도 잘 되어 있어 실습 및 테스트가 용이하다."
    },
    {
      "heading": "5. 유사 플랫폼과의 비교",
      "content": "Boundless는 범용 계산 인프라로, 소셜 그래프 중심의 Farcaster나 Lens, 메시징 중심의 XMTP와는 목적이 다르다. 그러나 '탈중앙 + 오프체인 계산 + 온체인 정합성'이라는 구조에서는 유사성이 있다. Boundless는 더 낮은 레벨에서 임의 계산을 검증 가능하게 해주는 구조로, 다양한 프로젝트들이 그 위에 얹힐 수 있다. 예: AI 결과 검증, DEX 유동성 계산 등."
    },
    {
      "heading": "6. 생태계와 확장성",
      "content": "Boundless는 개발자와 프로버를 연결하는 마켓플레이스 구조를 가진다. 역경매 방식으로 효율적인 가격 발견이 가능하며, $ZKC 토큰 기반의 인센티브 모델도 계획돼 있다. 프로버 수가 늘어날수록 네트워크 처리 능력도 선형적으로 증가하며, 여러 증명을 집계해 온체인 비용을 줄일 수 있다. 블록체인의 계산 한계를 극복할 수 있는 핵심 인프라로 주목받고 있다."
    }
  ]
}
